<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension mongodb@1.17.0

namespace MongoDB\BSON {
final class Binary implements \MongoDB\BSON\BinaryInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const TYPE_GENERIC = 0;
    const TYPE_FUNCTION = 1;
    const TYPE_OLD_BINARY = 2;
    const TYPE_OLD_UUID = 3;
    const TYPE_UUID = 4;
    const TYPE_MD5 = 5;
    const TYPE_ENCRYPTED = 6;
    const TYPE_COLUMN = 7;
    const TYPE_SENSITIVE = 8;
    const TYPE_USER_DEFINED = 128;

    // methods
    final public function __construct(string $data, int $type = unknown) {}
    final public function getData() : string {}
    final public function getType() : int {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Binary {}
    final public function __toString() : string {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface BinaryInterface {

    // methods
    function getData();
    function getType();
    function __toString() : string;
}

final class DBPointer implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final private function __construct() {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\DBPointer {}
    final public function __toString() : string {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

final class Decimal128 implements \MongoDB\BSON\Decimal128Interface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct(string $value) {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Decimal128 {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface Decimal128Interface {

    // methods
    function __toString();
}

final class Document implements \IteratorAggregate, \Traversable, \Serializable, \ArrayAccess, \MongoDB\BSON\Type {

    // methods
    private function __construct() {}
    final public static function fromBSON(string $bson) : \MongoDB\BSON\Document {}
    final public static function fromJSON(string $json) : \MongoDB\BSON\Document {}
    final public static function fromPHP($value) : \MongoDB\BSON\Document {}
    final public function get(string $key) {}
    final public function getIterator() : \MongoDB\BSON\Iterator {}
    final public function has(string $key) : bool {}
    final public function toPHP(?array $typeMap = null) {}
    final public function toCanonicalExtendedJSON() : string {}
    final public function toRelaxedExtendedJSON() : string {}
    public function offsetExists($key) : bool {}
    public function offsetGet($key) {}
    public function offsetSet($key, $value) : void {}
    public function offsetUnset($key) : void {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Document {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

final class Int64 implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($value) {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Int64 {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

final class Iterator implements \Iterator, \Traversable {

    // methods
    final private function __construct() {}
    final public function current() {}
    final public function key() {}
    final public function next() : void {}
    final public function rewind() : void {}
    final public function valid() : bool {}
    final public function __wakeup() : void {}
}

final class Javascript implements \MongoDB\BSON\JavascriptInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct(string $code, $scope = null) {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Javascript {}
    final public function getCode() : string {}
    final public function getScope() : ?object {}
    final public function __toString() : string {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface JavascriptInterface {

    // methods
    function getCode();
    function getScope();
    function __toString();
}

final class MaxKey implements \MongoDB\BSON\MaxKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public static function __set_state(array $properties) : \MongoDB\BSON\MaxKey {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface MaxKeyInterface {
}

final class MinKey implements \MongoDB\BSON\MinKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public static function __set_state(array $properties) : \MongoDB\BSON\MinKey {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface MinKeyInterface {
}

final class ObjectId implements \MongoDB\BSON\ObjectIdInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct(?string $id = null) {}
    final public function getTimestamp() : int {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\ObjectId {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface ObjectIdInterface {

    // methods
    function getTimestamp();
    function __toString();
}

final class PackedArray implements \IteratorAggregate, \Traversable, \Serializable, \ArrayAccess, \MongoDB\BSON\Type {

    // methods
    private function __construct() {}
    final public static function fromPHP(array $value) : \MongoDB\BSON\PackedArray {}
    final public function get(int $index) {}
    final public function getIterator() : \MongoDB\BSON\Iterator {}
    final public function has(int $index) : bool {}
    final public function toPHP(?array $typeMap = null) {}
    public function offsetExists($key) : bool {}
    public function offsetGet($key) {}
    public function offsetSet($key, $value) : void {}
    public function offsetUnset($key) : void {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\PackedArray {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

interface Persistable extends \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \MongoDB\BSON\Unserializable {

    // methods
    function bsonSerialize();
}

final class Regex implements \MongoDB\BSON\RegexInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct(string $pattern, string $flags = unknown) {}
    final public function getPattern() : string {}
    final public function getFlags() : string {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Regex {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface RegexInterface {

    // methods
    function getPattern();
    function getFlags();
    function __toString();
}

interface Serializable extends \MongoDB\BSON\Type {

    // methods
    function bsonSerialize();
}

final class Symbol implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final private function __construct() {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Symbol {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

final class Timestamp implements \MongoDB\BSON\TimestampInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($increment, $timestamp) {}
    final public function getTimestamp() : int {}
    final public function getIncrement() : int {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Timestamp {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface TimestampInterface {

    // methods
    function getTimestamp();
    function getIncrement();
    function __toString();
}

interface Type {
}

final class UTCDateTime implements \MongoDB\BSON\UTCDateTimeInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($milliseconds = null) {}
    final public function toDateTime() : \DateTime {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\UTCDateTime {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface UTCDateTimeInterface {

    // methods
    function toDateTime();
    function __toString();
}

final class Undefined implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final private function __construct() {}
    final public function __toString() : string {}
    final public static function __set_state(array $properties) : \MongoDB\BSON\Undefined {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
    final public function jsonSerialize() {}
}

interface Unserializable {

    // methods
    function bsonUnserialize(array $data);
}

}

namespace MongoDB\Driver {
final class BulkWrite implements \Countable {

    // methods
    final public function __construct(?array $options = null) {}
    public function count() : int {}
    public function delete($filter, ?array $deleteOptions = null) : void {}
    final public function insert($document) {}
    public function update($filter, $newObj, ?array $updateOptions = null) : void {}
    final public function __wakeup() : void {}
}

final class ClientEncryption {

    // constants
    const AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC = 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic';
    const AEAD_AES_256_CBC_HMAC_SHA_512_RANDOM = 'AEAD_AES_256_CBC_HMAC_SHA_512-Random';
    const ALGORITHM_INDEXED = 'Indexed';
    const ALGORITHM_UNINDEXED = 'Unindexed';
    const ALGORITHM_RANGE_PREVIEW = 'RangePreview';
    const QUERY_TYPE_EQUALITY = 'equality';
    const QUERY_TYPE_RANGE_PREVIEW = 'rangePreview';

    // methods
    final public function __construct(array $options) {}
    final public function addKeyAltName(\MongoDB\BSON\Binary $keyId, string $keyAltName) : ?object {}
    final public function createDataKey(string $kmsProvider, ?array $options = null) : \MongoDB\BSON\Binary {}
    final public function decrypt(\MongoDB\BSON\Binary $value) {}
    final public function deleteKey(\MongoDB\BSON\Binary $keyId) : object {}
    final public function encrypt($value, ?array $options = null) : \MongoDB\BSON\Binary {}
    final public function encryptExpression($expr, ?array $options = null) : object {}
    final public function getKey(\MongoDB\BSON\Binary $keyId) : ?object {}
    final public function getKeyByAltName(string $keyAltName) : ?object {}
    final public function getKeys() : \MongoDB\Driver\Cursor {}
    final public function removeKeyAltName(\MongoDB\BSON\Binary $keyId, string $keyAltName) : ?object {}
    final public function rewrapManyDataKey($filter, ?array $options = null) : object {}
    final public function __wakeup() : void {}
}

final class Command {

    // methods
    final public function __construct($document, ?array $commandOptions = null) {}
    final public function __wakeup() : void {}
}

final class Cursor implements \Iterator, \Traversable, \MongoDB\Driver\CursorInterface {

    // methods
    final private function __construct() {}
    public function current() {}
    final public function getId() : \MongoDB\Driver\CursorId {}
    final public function getServer() : \MongoDB\Driver\Server {}
    final public function isDead() : bool {}
    public function key() : ?int {}
    public function next() : void {}
    public function rewind() : void {}
    final public function setTypeMap(array $typemap) : void {}
    final public function toArray() : array {}
    public function valid() : bool {}
    final public function __wakeup() : void {}
}

final class CursorId implements \Serializable {

    // methods
    final private function __construct() {}
    final public static function __set_state(array $properties) : \MongoDB\Driver\CursorId {}
    final public function __toString() : string {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

interface CursorInterface extends \Traversable {

    // methods
    function getId();
    function getServer();
    function isDead();
    function setTypeMap(array $typemap);
    function toArray();
}

final class Manager {

    // methods
    final public function __construct(?string $uri = null, ?array $uriOptions = null, ?array $driverOptions = null) {}
    final public function addSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) : void {}
    final public function createClientEncryption(array $options) : \MongoDB\Driver\ClientEncryption {}
    final public function executeBulkWrite(string $namespace, \MongoDB\Driver\BulkWrite $bulk, $options = null) : \MongoDB\Driver\WriteResult {}
    final public function executeCommand(string $db, \MongoDB\Driver\Command $command, $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeQuery(string $namespace, \MongoDB\Driver\Query $query, $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeReadCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeReadWriteCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeWriteCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function getEncryptedFieldsMap() {}
    final public function getReadConcern() : \MongoDB\Driver\ReadConcern {}
    final public function getReadPreference() : \MongoDB\Driver\ReadPreference {}
    final public function getServers() : array {}
    final public function getWriteConcern() : \MongoDB\Driver\WriteConcern {}
    final public function removeSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) : void {}
    final public function selectServer(?\MongoDB\Driver\ReadPreference $readPreference = null) : \MongoDB\Driver\Server {}
    final public function startSession(?array $options = null) : \MongoDB\Driver\Session {}
    final public function __wakeup() : void {}
}

final class Query {

    // methods
    final public function __construct($filter, ?array $queryOptions = null) {}
    final public function __wakeup() : void {}
}

final class ReadConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const LINEARIZABLE = 'linearizable';
    const LOCAL = 'local';
    const MAJORITY = 'majority';
    const AVAILABLE = 'available';
    const SNAPSHOT = 'snapshot';

    // methods
    final public function __construct(?string $level = null) {}
    final public function getLevel() : ?string {}
    final public function isDefault() : bool {}
    final public static function __set_state(array $properties) : \MongoDB\Driver\ReadConcern {}
    final public function bsonSerialize() : \stdClass {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

final class ReadPreference implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const RP_PRIMARY = 1;
    const RP_PRIMARY_PREFERRED = 5;
    const RP_SECONDARY = 2;
    const RP_SECONDARY_PREFERRED = 6;
    const RP_NEAREST = 10;
    const PRIMARY = 'primary';
    const PRIMARY_PREFERRED = 'primaryPreferred';
    const SECONDARY = 'secondary';
    const SECONDARY_PREFERRED = 'secondaryPreferred';
    const NEAREST = 'nearest';
    const NO_MAX_STALENESS = -1;
    const SMALLEST_MAX_STALENESS_SECONDS = 90;

    // methods
    final public function __construct($mode, ?array $tagSets = null, ?array $options = null) {}
    final public function getHedge() : ?object {}
    final public function getMaxStalenessSeconds() : int {}
    final public function getMode() : int {}
    final public function getModeString() : string {}
    final public function getTagSets() : array {}
    final public static function __set_state(array $properties) : \MongoDB\Driver\ReadPreference {}
    final public function bsonSerialize() : \stdClass {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

final class Server {

    // constants
    const TYPE_UNKNOWN = 0;
    const TYPE_STANDALONE = 1;
    const TYPE_MONGOS = 2;
    const TYPE_POSSIBLE_PRIMARY = 3;
    const TYPE_RS_PRIMARY = 4;
    const TYPE_RS_SECONDARY = 5;
    const TYPE_RS_ARBITER = 6;
    const TYPE_RS_OTHER = 7;
    const TYPE_RS_GHOST = 8;
    const TYPE_LOAD_BALANCER = 9;

    // methods
    final private function __construct() {}
    final public function executeBulkWrite(string $namespace, \MongoDB\Driver\BulkWrite $bulkWrite, $options = null) : \MongoDB\Driver\WriteResult {}
    final public function executeCommand(string $db, \MongoDB\Driver\Command $command, $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeQuery(string $namespace, \MongoDB\Driver\Query $query, $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeReadCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeReadWriteCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function executeWriteCommand(string $db, \MongoDB\Driver\Command $command, ?array $options = null) : \MongoDB\Driver\Cursor {}
    final public function getHost() : string {}
    final public function getInfo() : array {}
    final public function getLatency() : ?int {}
    final public function getPort() : int {}
    final public function getServerDescription() : \MongoDB\Driver\ServerDescription {}
    final public function getTags() : array {}
    final public function getType() : int {}
    final public function isArbiter() : bool {}
    final public function isHidden() : bool {}
    final public function isPassive() : bool {}
    final public function isPrimary() : bool {}
    final public function isSecondary() : bool {}
    final public function __wakeup() : void {}
}

final class ServerApi implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const V1 = '1';

    // methods
    final public function __construct(string $version, ?bool $strict = null, ?bool $deprecationErrors = null) {}
    final public static function __set_state(array $properties) : \MongoDB\Driver\ServerApi {}
    final public function bsonSerialize() : \stdClass {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

final class ServerDescription {

    // constants
    const TYPE_UNKNOWN = 'Unknown';
    const TYPE_STANDALONE = 'Standalone';
    const TYPE_MONGOS = 'Mongos';
    const TYPE_POSSIBLE_PRIMARY = 'PossiblePrimary';
    const TYPE_RS_PRIMARY = 'RSPrimary';
    const TYPE_RS_SECONDARY = 'RSSecondary';
    const TYPE_RS_ARBITER = 'RSArbiter';
    const TYPE_RS_OTHER = 'RSOther';
    const TYPE_RS_GHOST = 'RSGhost';
    const TYPE_LOAD_BALANCER = 'LoadBalancer';

    // methods
    final private function __construct() {}
    final public function getHelloResponse() : array {}
    final public function getHost() : string {}
    final public function getLastUpdateTime() : int {}
    final public function getPort() : int {}
    final public function getRoundTripTime() : ?int {}
    final public function getType() : string {}
    final public function __wakeup() : void {}
}

final class Session {

    // constants
    const TRANSACTION_NONE = 'none';
    const TRANSACTION_STARTING = 'starting';
    const TRANSACTION_IN_PROGRESS = 'in_progress';
    const TRANSACTION_COMMITTED = 'committed';
    const TRANSACTION_ABORTED = 'aborted';

    // methods
    final private function __construct() {}
    final public function abortTransaction() : void {}
    final public function advanceClusterTime($clusterTime) : void {}
    final public function advanceOperationTime(\MongoDB\BSON\TimestampInterface $operationTime) : void {}
    final public function commitTransaction() : void {}
    final public function endSession() : void {}
    final public function getClusterTime() : ?object {}
    final public function getLogicalSessionId() : object {}
    final public function getOperationTime() : ?\MongoDB\BSON\Timestamp {}
    final public function getServer() : ?\MongoDB\Driver\Server {}
    final public function getTransactionOptions() : ?array {}
    final public function getTransactionState() : string {}
    final public function isDirty() : bool {}
    final public function isInTransaction() : bool {}
    final public function startTransaction(?array $options = null) : void {}
    final public function __wakeup() : void {}
}

final class TopologyDescription {

    // constants
    const TYPE_UNKNOWN = 'Unknown';
    const TYPE_SINGLE = 'Single';
    const TYPE_SHARDED = 'Sharded';
    const TYPE_REPLICA_SET_NO_PRIMARY = 'ReplicaSetNoPrimary';
    const TYPE_REPLICA_SET_WITH_PRIMARY = 'ReplicaSetWithPrimary';
    const TYPE_LOAD_BALANCED = 'LoadBalanced';

    // methods
    final private function __construct() {}
    final public function getServers() : array {}
    final public function getType() : string {}
    final public function hasReadableServer(?\MongoDB\Driver\ReadPreference $readPreference = null) : bool {}
    final public function hasWritableServer() : bool {}
    final public function __wakeup() : void {}
}

final class WriteConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const MAJORITY = 'majority';

    // methods
    final public function __construct($w, ?int $wtimeout = null, ?bool $journal = null) {}
    final public function getJournal() : ?bool {}
    final public function getW() {}
    final public function getWtimeout() : int {}
    final public function isDefault() : bool {}
    final public static function __set_state(array $properties) : \MongoDB\Driver\WriteConcern {}
    final public function bsonSerialize() : \stdClass {}
    final public function serialize() : string {}
    final public function unserialize($serialized) : void {}
    final public function __unserialize(array $data) : void {}
    final public function __serialize() : array {}
}

final class WriteConcernError {

    // methods
    final private function __construct() {}
    final public function getCode() : int {}
    final public function getInfo() : ?object {}
    final public function getMessage() : string {}
    final public function __wakeup() : void {}
}

final class WriteError {

    // methods
    final private function __construct() {}
    final public function getCode() : int {}
    final public function getIndex() : int {}
    final public function getInfo() : ?object {}
    final public function getMessage() : string {}
    final public function __wakeup() : void {}
}

final class WriteResult {

    // methods
    final private function __construct() {}
    final public function getInsertedCount() : ?int {}
    final public function getMatchedCount() : ?int {}
    final public function getModifiedCount() : ?int {}
    final public function getDeletedCount() : ?int {}
    final public function getUpsertedCount() : ?int {}
    final public function getServer() : \MongoDB\Driver\Server {}
    final public function getUpsertedIds() : array {}
    final public function getWriteConcernError() : ?\MongoDB\Driver\WriteConcernError {}
    final public function getWriteErrors() : array {}
    final public function getErrorReplies() : array {}
    final public function isAcknowledged() : bool {}
    final public function __wakeup() : void {}
}

}

namespace MongoDB\Driver\Exception {
class AuthenticationException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class BulkWriteException extends \MongoDB\Driver\Exception\WriteException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $writeResult;
}

class CommandException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $resultDocument;

    // methods
    final public function getResultDocument() : object {}
}

class ConnectionException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

final class ConnectionTimeoutException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class EncryptionException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

interface Exception extends \Throwable {
}

final class ExecutionTimeoutException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class InvalidArgumentException extends \InvalidArgumentException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class LogicException extends \LogicException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RuntimeException extends \RuntimeException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;

    // methods
    final public function hasErrorLabel(string $errorLabel) : bool {}
}

final class SSLConnectionException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class ServerException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class UnexpectedValueException extends \UnexpectedValueException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

abstract class WriteException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    public $writeresult;
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $writeResult;

    // methods
    final public function getWriteResult() : \MongoDB\Driver\WriteResult {}
}

}

namespace MongoDB\Driver\Monitoring {
final class CommandFailedEvent {

    // methods
    final private function __construct() {}
    final public function getCommandName() : string {}
    final public function getDurationMicros() : int {}
    final public function getError() : \Exception {}
    final public function getOperationId() : string {}
    final public function getReply() : object {}
    final public function getRequestId() : string {}
    final public function getServer() : \MongoDB\Driver\Server {}
    final public function getServiceId() : ?\MongoDB\BSON\ObjectId {}
    final public function getServerConnectionId() : ?int {}
    final public function __wakeup() : void {}
}

final class CommandStartedEvent {

    // methods
    final private function __construct() {}
    final public function getCommand() : object {}
    final public function getCommandName() : string {}
    final public function getDatabaseName() : string {}
    final public function getOperationId() : string {}
    final public function getRequestId() : string {}
    final public function getServer() : \MongoDB\Driver\Server {}
    final public function getServiceId() : ?\MongoDB\BSON\ObjectId {}
    final public function getServerConnectionId() : ?int {}
    final public function __wakeup() : void {}
}

interface CommandSubscriber extends \MongoDB\Driver\Monitoring\Subscriber {

    // methods
    function commandStarted(\MongoDB\Driver\Monitoring\CommandStartedEvent $event);
    function commandSucceeded(\MongoDB\Driver\Monitoring\CommandSucceededEvent $event);
    function commandFailed(\MongoDB\Driver\Monitoring\CommandFailedEvent $event);
}

final class CommandSucceededEvent {

    // methods
    final private function __construct() {}
    final public function getCommandName() : string {}
    final public function getDurationMicros() : int {}
    final public function getOperationId() : string {}
    final public function getReply() : object {}
    final public function getRequestId() : string {}
    final public function getServer() : \MongoDB\Driver\Server {}
    final public function getServiceId() : ?\MongoDB\BSON\ObjectId {}
    final public function getServerConnectionId() : ?int {}
    final public function __wakeup() : void {}
}

interface LogSubscriber extends \MongoDB\Driver\Monitoring\Subscriber {

    // constants
    const LEVEL_ERROR = 0;
    const LEVEL_CRITICAL = 1;
    const LEVEL_WARNING = 2;
    const LEVEL_MESSAGE = 3;
    const LEVEL_INFO = 4;
    const LEVEL_DEBUG = 5;

    // methods
    function log(int $level, string $domain, string $message) : void;
}

interface SDAMSubscriber extends \MongoDB\Driver\Monitoring\Subscriber {

    // methods
    function serverChanged(\MongoDB\Driver\Monitoring\ServerChangedEvent $event);
    function serverClosed(\MongoDB\Driver\Monitoring\ServerClosedEvent $event);
    function serverOpening(\MongoDB\Driver\Monitoring\ServerOpeningEvent $event);
    function serverHeartbeatFailed(\MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent $event);
    function serverHeartbeatStarted(\MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent $event);
    function serverHeartbeatSucceeded(\MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent $event);
    function topologyChanged(\MongoDB\Driver\Monitoring\TopologyChangedEvent $event);
    function topologyClosed(\MongoDB\Driver\Monitoring\TopologyClosedEvent $event);
    function topologyOpening(\MongoDB\Driver\Monitoring\TopologyOpeningEvent $event);
}

final class ServerChangedEvent {

    // methods
    final private function __construct() {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function getNewDescription() : \MongoDB\Driver\ServerDescription {}
    final public function getPreviousDescription() : \MongoDB\Driver\ServerDescription {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

final class ServerClosedEvent {

    // methods
    final private function __construct() {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

final class ServerHeartbeatFailedEvent {

    // methods
    final private function __construct() {}
    final public function getDurationMicros() : int {}
    final public function getError() : \Exception {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function isAwaited() : bool {}
    final public function __wakeup() : void {}
}

final class ServerHeartbeatStartedEvent {

    // methods
    final private function __construct() {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function isAwaited() : bool {}
    final public function __wakeup() : void {}
}

final class ServerHeartbeatSucceededEvent {

    // methods
    final private function __construct() {}
    final public function getDurationMicros() : int {}
    final public function getReply() : object {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function isAwaited() : bool {}
    final public function __wakeup() : void {}
}

final class ServerOpeningEvent {

    // methods
    final private function __construct() {}
    final public function getPort() : int {}
    final public function getHost() : string {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

interface Subscriber {
}

final class TopologyChangedEvent {

    // methods
    final private function __construct() {}
    final public function getNewDescription() : \MongoDB\Driver\TopologyDescription {}
    final public function getPreviousDescription() : \MongoDB\Driver\TopologyDescription {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

final class TopologyClosedEvent {

    // methods
    final private function __construct() {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

final class TopologyOpeningEvent {

    // methods
    final private function __construct() {}
    final public function getTopologyId() : \MongoDB\BSON\ObjectId {}
    final public function __wakeup() : void {}
}

}

namespace mongodb\bson {
function fromjson(string $json) : string {}
function fromphp($value) : string {}
function tocanonicalextendedjson(string $bson) : string {}
function tojson(string $bson) : string {}
function tophp(string $bson, ?array $typemap = null) {}
function torelaxedextendedjson(string $bson) : string {}
}

namespace mongodb\driver\monitoring {
function addsubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) : void {}
function mongoc_log(int $level, string $domain, string $message) : void {}
function removesubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) : void {}
}

namespace {
const MONGODB_STABILITY = 'stable';
const MONGODB_VERSION = '1.17.0';
}
