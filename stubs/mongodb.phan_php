<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension mongodb@1.11.1

namespace MongoDB\BSON {
final class Binary implements \MongoDB\BSON\BinaryInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const TYPE_GENERIC = 0;
    const TYPE_FUNCTION = 1;
    const TYPE_OLD_BINARY = 2;
    const TYPE_OLD_UUID = 3;
    const TYPE_UUID = 4;
    const TYPE_MD5 = 5;
    const TYPE_ENCRYPTED = 6;
    const TYPE_USER_DEFINED = 128;

    // methods
    final public function __construct($data, $type) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final public function getData() {}
    final public function getType() {}
}

interface BinaryInterface {

    // methods
    function getData();
    function getType();
    function __toString();
}

final class DBPointer implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final private function __construct() {}
}

final class Decimal128 implements \MongoDB\BSON\Decimal128Interface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($value) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

interface Decimal128Interface {

    // methods
    function __toString();
}

final class Int64 implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final private function __construct() {}
}

final class Javascript implements \MongoDB\BSON\JavascriptInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($javascript, $scope = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final public function getCode() {}
    final public function getScope() {}
}

interface JavascriptInterface {

    // methods
    function getCode();
    function getScope();
    function __toString();
}

final class MaxKey implements \MongoDB\BSON\MaxKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

interface MaxKeyInterface {
}

final class MinKey implements \MongoDB\BSON\MinKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

interface MinKeyInterface {
}

final class ObjectId implements \MongoDB\BSON\ObjectIdInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($id = null) {}
    final public function getTimestamp() {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

interface ObjectIdInterface {

    // methods
    function getTimestamp();
    function __toString();
}

interface Persistable extends \MongoDB\BSON\Unserializable, \MongoDB\BSON\Serializable, \MongoDB\BSON\Type {
}

final class Regex implements \MongoDB\BSON\RegexInterface, \MongoDB\BSON\Type, \Serializable, \JsonSerializable {

    // methods
    final public function __construct($pattern, $flags = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final public function getPattern() {}
    final public function getFlags() {}
}

interface RegexInterface {

    // methods
    function getFlags();
    function getPattern();
    function __toString();
}

interface Serializable extends \MongoDB\BSON\Type {

    // methods
    function bsonSerialize();
}

final class Symbol implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final private function __construct() {}
}

final class Timestamp implements \MongoDB\BSON\TimestampInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($increment, $timestamp) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final public function getIncrement() {}
    final public function getTimestamp() {}
}

interface TimestampInterface {

    // methods
    function getIncrement();
    function getTimestamp();
    function __toString();
}

interface Type {
}

final class UTCDateTime implements \MongoDB\BSON\UTCDateTimeInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __construct($milliseconds = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final public function toDateTime() {}
}

interface UTCDateTimeInterface {

    // methods
    function toDateTime();
    function __toString();
}

final class Undefined implements \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    final public function __serialize() {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function jsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final private function __construct() {}
}

interface Unserializable {

    // methods
    function bsonUnserialize(array $data);
}

}

namespace MongoDB\Driver {
final class BulkWrite implements \Countable {

    // methods
    final public function __construct(?array $options = null) {}
    final public function insert($document) {}
    final public function update($query, $newObj, ?array $updateOptions = null) {}
    final public function delete($query, ?array $deleteOptions = null) {}
    final public function count() {}
    final public function __wakeup() {}
}

final class ClientEncryption {

    // constants
    const AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC = 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic';
    const AEAD_AES_256_CBC_HMAC_SHA_512_RANDOM = 'AEAD_AES_256_CBC_HMAC_SHA_512-Random';

    // methods
    final public function createDataKey($kmsProvider, ?array $options = null) {}
    final public function encrypt($value, ?array $options = null) {}
    final public function decrypt(\MongoDB\BSON\BinaryInterface $keyVaultClient) {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class Command {

    // methods
    final public function __construct($document, ?array $options = null) {}
    final public function __wakeup() {}
}

final class Cursor implements \Iterator, \Traversable, \MongoDB\Driver\CursorInterface {

    // methods
    final public function setTypeMap(array $typemap) {}
    final public function toArray() {}
    final public function getId() {}
    final public function getServer() {}
    final public function isDead() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function valid() {}
    public function rewind() {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class CursorId implements \Serializable {

    // methods
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __toString() {}
    final public function __unserialize(array $data) {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
    final private function __construct() {}
}

interface CursorInterface extends \Traversable {

    // methods
    function getId();
    function getServer();
    function isDead();
    function setTypeMap(array $typemap);
    function toArray();
}

final class Manager {

    // methods
    final public function __construct($uri = null, array $options = unknown, array $driverOptions = unknown) {}
    final public function addSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
    final public function createClientEncryption(array $options) {}
    final public function executeCommand($db, \MongoDB\Driver\Command $command, $options = null) {}
    final public function executeReadCommand($db, \MongoDB\Driver\Command $command, array $options = unknown) {}
    final public function executeWriteCommand($db, \MongoDB\Driver\Command $command, array $options = unknown) {}
    final public function executeReadWriteCommand($db, \MongoDB\Driver\Command $command, $options = null) {}
    final public function executeQuery($namespace, \MongoDB\Driver\Query $zquery, $options = null) {}
    final public function executeBulkWrite($namespace, \MongoDB\Driver\BulkWrite $zbulk, $options = null) {}
    final public function getReadConcern() {}
    final public function getReadPreference() {}
    final public function getServers() {}
    final public function getWriteConcern() {}
    final public function removeSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
    final public function selectServer(?\MongoDB\Driver\ReadPreference $readPreference = null) {}
    final public function startSession(?array $options = null) {}
    final public function __wakeup() {}
}

final class Query {

    // methods
    final public function __construct($filter, ?array $options = null) {}
    final public function __wakeup() {}
}

final class ReadConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const LOCAL = 'local';
    const MAJORITY = 'majority';
    const LINEARIZABLE = 'linearizable';
    const AVAILABLE = 'available';
    const SNAPSHOT = 'snapshot';

    // methods
    final public function __construct($level = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function getLevel() {}
    final public function isDefault() {}
    final public function bsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

final class ReadPreference implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const RP_PRIMARY = 1;
    const RP_PRIMARY_PREFERRED = 5;
    const RP_SECONDARY = 2;
    const RP_SECONDARY_PREFERRED = 6;
    const RP_NEAREST = 10;
    const NO_MAX_STALENESS = -1;
    const SMALLEST_MAX_STALENESS_SECONDS = 90;
    const PRIMARY = 'primary';
    const PRIMARY_PREFERRED = 'primaryPreferred';
    const SECONDARY = 'secondary';
    const SECONDARY_PREFERRED = 'secondaryPreferred';
    const NEAREST = 'nearest';

    // methods
    final public function __construct($mode, ?array $tagSets = null, ?array $options = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function getHedge() {}
    final public function getMaxStalenessSeconds() {}
    final public function getMode() {}
    final public function getModeString() {}
    final public function getTagSets() {}
    final public function bsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

final class Server {

    // constants
    const TYPE_UNKNOWN = 0;
    const TYPE_STANDALONE = 1;
    const TYPE_MONGOS = 2;
    const TYPE_POSSIBLE_PRIMARY = 3;
    const TYPE_RS_PRIMARY = 4;
    const TYPE_RS_SECONDARY = 5;
    const TYPE_RS_ARBITER = 6;
    const TYPE_RS_OTHER = 7;
    const TYPE_RS_GHOST = 8;
    const TYPE_LOAD_BALANCER = 9;

    // methods
    final public function executeCommand($db, \MongoDB\Driver\Command $command, $options = null) {}
    final public function executeReadCommand($db, \MongoDB\Driver\Command $command, array $options = unknown) {}
    final public function executeWriteCommand($db, \MongoDB\Driver\Command $command, array $options = unknown) {}
    final public function executeReadWriteCommand($db, \MongoDB\Driver\Command $command, array $options = unknown) {}
    final public function executeQuery($namespace, \MongoDB\Driver\Query $zquery, $options = null) {}
    final public function executeBulkWrite($namespace, \MongoDB\Driver\BulkWrite $zbulk, $options = null) {}
    final public function getHost() {}
    final public function getTags() {}
    final public function getInfo() {}
    final public function getLatency() {}
    final public function getPort() {}
    final public function getType() {}
    final public function isPrimary() {}
    final public function isSecondary() {}
    final public function isArbiter() {}
    final public function isHidden() {}
    final public function isPassive() {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class ServerApi implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const V1 = '1';

    // methods
    final public function __construct(string $version, ?bool $strict = null, ?bool $deprecationErrors = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function bsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

final class Session {

    // constants
    const TRANSACTION_NONE = 'none';
    const TRANSACTION_STARTING = 'starting';
    const TRANSACTION_IN_PROGRESS = 'in_progress';
    const TRANSACTION_COMMITTED = 'committed';
    const TRANSACTION_ABORTED = 'aborted';

    // methods
    final public function abortTransaction() {}
    final public function advanceClusterTime($clusterTime) {}
    final public function advanceOperationTime($timestamp) {}
    final public function commitTransaction() {}
    final public function endSession() {}
    final public function getClusterTime() {}
    final public function getLogicalSessionId() {}
    final public function getOperationTime() {}
    final public function getServer() {}
    final public function getTransactionOptions() {}
    final public function getTransactionState() {}
    final public function isInTransaction() {}
    final public function startTransaction(?array $options = null) {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class WriteConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    const MAJORITY = 'majority';

    // methods
    final public function __construct($w, $wtimeout = null, $journal = null) {}
    final public function __serialize() {}
    public static function __set_state(array $properties) {}
    final public function __unserialize(array $data) {}
    final public function getW() {}
    final public function getWtimeout() {}
    final public function getJournal() {}
    final public function isDefault() {}
    final public function bsonSerialize() {}
    final public function serialize() {}
    final public function unserialize($serialized) {}
}

final class WriteConcernError {

    // methods
    final public function getCode() {}
    final public function getInfo() {}
    final public function getMessage() {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class WriteError {

    // methods
    final public function getCode() {}
    final public function getIndex() {}
    final public function getMessage() {}
    final public function getInfo() {}
    final private function __construct() {}
    final public function __wakeup() {}
}

final class WriteResult {

    // methods
    final public function getInsertedCount() {}
    final public function getMatchedCount() {}
    final public function getModifiedCount() {}
    final public function getDeletedCount() {}
    final public function getUpsertedCount() {}
    final public function getServer() {}
    final public function getUpsertedIds() {}
    final public function getWriteConcernError() {}
    final public function getWriteErrors() {}
    final public function isAcknowledged() {}
    final private function __construct() {}
    final public function __wakeup() {}
}

}

namespace MongoDB\Driver\Exception {
class AuthenticationException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class BulkWriteException extends \MongoDB\Driver\Exception\WriteException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $writeResult;
}

class CommandException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $resultDocument;

    // methods
    final public function getResultDocument() {}
}

class ConnectionException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

final class ConnectionTimeoutException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class EncryptionException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

interface Exception extends \Throwable {
}

final class ExecutionTimeoutException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class InvalidArgumentException extends \InvalidArgumentException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class LogicException extends \LogicException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RuntimeException extends \RuntimeException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;

    // methods
    final public function hasErrorLabel($label) {}
}

final class SSLConnectionException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class ServerException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
}

class UnexpectedValueException extends \UnexpectedValueException implements \MongoDB\Driver\Exception\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

abstract class WriteException extends \MongoDB\Driver\Exception\ServerException {

    // properties
    public $writeresult;
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    protected $errorLabels;
    protected $writeResult;

    // methods
    final public function getWriteResult() {}
}

}

namespace MongoDB\Driver\Monitoring {
final class CommandFailedEvent {

    // methods
    final private function __construct() {}
    final public function getCommandName() {}
    final public function getError() {}
    final public function getDurationMicros() {}
    final public function getOperationId() {}
    final public function getReply() {}
    final public function getRequestId() {}
    final public function getServer() {}
    final public function getServiceId() {}
    final public function __wakeup() {}
}

final class CommandStartedEvent {

    // methods
    final private function __construct() {}
    final public function getCommand() {}
    final public function getCommandName() {}
    final public function getDatabaseName() {}
    final public function getOperationId() {}
    final public function getRequestId() {}
    final public function getServer() {}
    final public function getServiceId() {}
    final public function __wakeup() {}
}

interface CommandSubscriber extends \MongoDB\Driver\Monitoring\Subscriber {

    // methods
    function commandStarted(\MongoDB\Driver\Monitoring\CommandStartedEvent $event);
    function commandSucceeded(\MongoDB\Driver\Monitoring\CommandSucceededEvent $event);
    function commandFailed(\MongoDB\Driver\Monitoring\CommandFailedEvent $event);
}

final class CommandSucceededEvent {

    // methods
    final private function __construct() {}
    final public function getCommandName() {}
    final public function getDurationMicros() {}
    final public function getOperationId() {}
    final public function getReply() {}
    final public function getRequestId() {}
    final public function getServer() {}
    final public function getServiceId() {}
    final public function __wakeup() {}
}

interface Subscriber {
}

}

namespace mongodb\bson {
function fromjson($json) {}
function fromphp($value) {}
function tocanonicalextendedjson($bson) {}
function tojson($bson) {}
function tophp($bson, array $typemap = unknown) {}
function torelaxedextendedjson($bson) {}
}

namespace mongodb\driver\monitoring {
function addsubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
function removesubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
}

namespace {
const MONGODB_STABILITY = 'stable';
const MONGODB_VERSION = '1.11.1';
}
