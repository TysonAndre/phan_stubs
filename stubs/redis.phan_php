<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension redis@6.0.2

namespace {
class Redis {

    // constants
    const REDIS_NOT_FOUND = 0;
    const REDIS_STRING = 1;
    const REDIS_SET = 2;
    const REDIS_LIST = 3;
    const REDIS_ZSET = 4;
    const REDIS_HASH = 5;
    const REDIS_STREAM = 6;
    const ATOMIC = 0;
    const MULTI = 1;
    const PIPELINE = 2;
    const OPT_SERIALIZER = 1;
    const OPT_PREFIX = 2;
    const OPT_READ_TIMEOUT = 3;
    const OPT_TCP_KEEPALIVE = 6;
    const OPT_COMPRESSION = 7;
    const OPT_REPLY_LITERAL = 8;
    const OPT_COMPRESSION_LEVEL = 9;
    const OPT_NULL_MULTIBULK_AS_NULL = 10;
    const SERIALIZER_NONE = 0;
    const SERIALIZER_PHP = 1;
    const SERIALIZER_IGBINARY = 2;
    const SERIALIZER_JSON = 4;
    const COMPRESSION_NONE = 0;
    const COMPRESSION_LZF = 1;
    const COMPRESSION_ZSTD = 2;
    const COMPRESSION_ZSTD_DEFAULT = 3;
    const COMPRESSION_ZSTD_MAX = 22;
    const COMPRESSION_LZ4 = 3;
    const OPT_SCAN = 4;
    const SCAN_RETRY = 1;
    const SCAN_NORETRY = 0;
    const SCAN_PREFIX = 2;
    const SCAN_NOPREFIX = 3;
    const BEFORE = 'before';
    const AFTER = 'after';
    const LEFT = 'left';
    const RIGHT = 'right';
    const OPT_MAX_RETRIES = 11;
    const OPT_BACKOFF_ALGORITHM = 12;
    const BACKOFF_ALGORITHM_DEFAULT = 0;
    const BACKOFF_ALGORITHM_CONSTANT = 6;
    const BACKOFF_ALGORITHM_UNIFORM = 5;
    const BACKOFF_ALGORITHM_EXPONENTIAL = 4;
    const BACKOFF_ALGORITHM_FULL_JITTER = 2;
    const BACKOFF_ALGORITHM_EQUAL_JITTER = 3;
    const BACKOFF_ALGORITHM_DECORRELATED_JITTER = 1;
    const OPT_BACKOFF_BASE = 13;
    const OPT_BACKOFF_CAP = 14;

    // methods
    public function __construct($options = null) {}
    public function __destruct() {}
    public function _compress($value) {}
    public function _uncompress($value) {}
    public function _prefix($key) {}
    public function _serialize($value) {}
    public function _unserialize($value) {}
    public function _pack($value) {}
    public function _unpack($value) {}
    public function acl($subcmd, ...$args) {}
    public function append($key, $value) {}
    public function auth($credentials) {}
    public function bgSave() {}
    public function bgrewriteaof() {}
    public function bitcount($key, $start = null, $end = null, $bybit = null) {}
    public function bitop($operation, $deskey, $srckey, ...$other_keys) {}
    public function bitpos($key, $bit, $start = null, $end = null, $bybit = null) {}
    public function blPop($key_or_keys, $timeout_or_key, ...$extra_args) {}
    public function brPop($key_or_keys, $timeout_or_key, ...$extra_args) {}
    public function brpoplpush($src, $dst, $timeout) {}
    public function bzPopMax($key, $timeout_or_key, ...$extra_args) {}
    public function bzPopMin($key, $timeout_or_key, ...$extra_args) {}
    public function bzmpop($timeout, $keys, $from, $count = null) {}
    public function zmpop($keys, $from, $count = null) {}
    public function blmpop($timeout, $keys, $from, $count = null) {}
    public function lmpop($keys, $from, $count = null) {}
    public function clearLastError() {}
    public function client($opt, ...$args) {}
    public function close() {}
    public function command($opt = null, ...$args) {}
    public function config($operation, $key_or_settings = null, $value = null) {}
    public function connect($host, $port = null, $timeout = null, $persistent_id = null, $retry_interval = null, $read_timeout = null, $context = null) {}
    public function copy($src, $dst, $options = null) {}
    public function dbSize() {}
    public function debug($key) {}
    public function decr($key, $by = null) {}
    public function decrBy($key, $value) {}
    public function del($key, ...$other_keys) {}
    public function delete($key, ...$other_keys) {}
    public function discard() {}
    public function dump($key) {}
    public function echo($str) {}
    public function eval($script, $args = null, $num_keys = null) {}
    public function eval_ro($script_sha, $args = null, $num_keys = null) {}
    public function evalsha($sha1, $args = null, $num_keys = null) {}
    public function evalsha_ro($sha1, $args = null, $num_keys = null) {}
    public function exec() {}
    public function exists($key, ...$other_keys) {}
    public function expire($key, $timeout, $mode = null) {}
    public function expireAt($key, $timestamp, $mode = null) {}
    public function failover($to = null, $abort = null, $timeout = null) {}
    public function expiretime($key) {}
    public function pexpiretime($key) {}
    public function fcall($fn, $keys = null, $args = null) {}
    public function fcall_ro($fn, $keys = null, $args = null) {}
    public function flushAll($sync = null) {}
    public function flushDB($sync = null) {}
    public function function($operation, ...$args) {}
    public function geoadd($key, $lng, $lat, $member, ...$other_triples_and_options) {}
    public function geodist($key, $src, $dst, $unit = null) {}
    public function geohash($key, $member, ...$other_members) {}
    public function geopos($key, $member, ...$other_members) {}
    public function georadius($key, $lng, $lat, $radius, $unit, $options = null) {}
    public function georadius_ro($key, $lng, $lat, $radius, $unit, $options = null) {}
    public function georadiusbymember($key, $member, $radius, $unit, $options = null) {}
    public function georadiusbymember_ro($key, $member, $radius, $unit, $options = null) {}
    public function geosearch($key, $position, $shape, $unit, $options = null) {}
    public function geosearchstore($dst, $src, $position, $shape, $unit, $options = null) {}
    public function get($key) {}
    public function getAuth() {}
    public function getBit($key, $idx) {}
    public function getEx($key, $options = null) {}
    public function getDBNum() {}
    public function getDel($key) {}
    public function getHost() {}
    public function getLastError() {}
    public function getMode() {}
    public function getOption($option) {}
    public function getPersistentID() {}
    public function getPort() {}
    public function getRange($key, $start, $end) {}
    public function lcs($key1, $key2, $options = null) {}
    public function getReadTimeout() {}
    public function getset($key, $value) {}
    public function getTimeout() {}
    public function getTransferredBytes() {}
    public function clearTransferredBytes() {}
    public function hDel($key, $field, ...$other_fields) {}
    public function hExists($key, $field) {}
    public function hGet($key, $member) {}
    public function hGetAll($key) {}
    public function hIncrBy($key, $field, $value) {}
    public function hIncrByFloat($key, $field, $value) {}
    public function hKeys($key) {}
    public function hLen($key) {}
    public function hMget($key, $fields) {}
    public function hMset($key, $fieldvals) {}
    public function hRandField($key, $options = null) {}
    public function hSet($key, $member, $value) {}
    public function hSetNx($key, $field, $value) {}
    public function hStrLen($key, $field) {}
    public function hVals($key) {}
    public function hscan($key, &$iterator, $pattern = null, $count = null) {}
    public function incr($key, $by = null) {}
    public function incrBy($key, $value) {}
    public function incrByFloat($key, $value) {}
    public function info(...$sections) {}
    public function isConnected() {}
    public function keys($pattern) {}
    public function lInsert($key, $pos, $pivot, $value) {}
    public function lLen($key) {}
    public function lMove($src, $dst, $wherefrom, $whereto) {}
    public function blmove($src, $dst, $wherefrom, $whereto, $timeout) {}
    public function lPop($key, $count = null) {}
    public function lPos($key, $value, $options = null) {}
    public function lPush($key, ...$elements) {}
    public function rPush($key, ...$elements) {}
    public function lPushx($key, $value) {}
    public function rPushx($key, $value) {}
    public function lSet($key, $index, $value) {}
    public function lastSave() {}
    public function lindex($key, $index) {}
    public function lrange($key, $start, $end) {}
    public function lrem($key, $value, $count = null) {}
    public function ltrim($key, $start, $end) {}
    public function mget($keys) {}
    public function migrate($host, $port, $key, $dstdb, $timeout, $copy = null, $replace = null, $credentials = null) {}
    public function move($key, $index) {}
    public function mset($key_values) {}
    public function msetnx($key_values) {}
    public function multi($value = null) {}
    public function object($subcommand, $key) {}
    public function open($host, $port = null, $timeout = null, $persistent_id = null, $retry_interval = null, $read_timeout = null, $context = null) {}
    public function pconnect($host, $port = null, $timeout = null, $persistent_id = null, $retry_interval = null, $read_timeout = null, $context = null) {}
    public function persist($key) {}
    public function pexpire($key, $timeout, $mode = null) {}
    public function pexpireAt($key, $timestamp, $mode = null) {}
    public function pfadd($key, $elements) {}
    public function pfcount($key_or_keys) {}
    public function pfmerge($dst, $srckeys) {}
    public function ping($message = null) {}
    public function pipeline() {}
    public function popen($host, $port = null, $timeout = null, $persistent_id = null, $retry_interval = null, $read_timeout = null, $context = null) {}
    public function psetex($key, $expire, $value) {}
    public function psubscribe($patterns, $cb) {}
    public function pttl($key) {}
    public function publish($channel, $message) {}
    public function pubsub($command, $arg = null) {}
    public function punsubscribe($patterns) {}
    public function rPop($key, $count = null) {}
    public function randomKey() {}
    public function rawcommand($command, ...$args) {}
    public function rename($old_name, $new_name) {}
    public function renameNx($key_src, $key_dst) {}
    public function reset() {}
    public function restore($key, $ttl, $value, $options = null) {}
    public function role() {}
    public function rpoplpush($srckey, $dstkey) {}
    public function sAdd($key, $value, ...$other_values) {}
    public function sAddArray($key, $values) {}
    public function sDiff($key, ...$other_keys) {}
    public function sDiffStore($dst, $key, ...$other_keys) {}
    public function sInter($key, ...$other_keys) {}
    public function sintercard($keys, $limit = null) {}
    public function sInterStore($key, ...$other_keys) {}
    public function sMembers($key) {}
    public function sMisMember($key, $member, ...$other_members) {}
    public function sMove($src, $dst, $value) {}
    public function sPop($key, $count = null) {}
    public function sRandMember($key, $count = null) {}
    public function sUnion($key, ...$other_keys) {}
    public function sUnionStore($dst, $key, ...$other_keys) {}
    public function save() {}
    public function scan(&$iterator, $pattern = null, $count = null, $type = null) {}
    public function scard($key) {}
    public function script($command, ...$args) {}
    public function select($db) {}
    public function set($key, $value, $options = null) {}
    public function setBit($key, $idx, $value) {}
    public function setRange($key, $index, $value) {}
    public function setOption($option, $value) {}
    public function setex($key, $expire, $value) {}
    public function setnx($key, $value) {}
    public function sismember($key, $value) {}
    public function slaveof($host = null, $port = null) {}
    public function replicaof($host = null, $port = null) {}
    public function touch($key_or_array, ...$more_keys) {}
    public function slowlog($operation, $length = null) {}
    public function sort($key, $options = null) {}
    public function sort_ro($key, $options = null) {}
    public function sortAsc($key, $pattern = null, $get = null, $offset = null, $count = null, $store = null) {}
    public function sortAscAlpha($key, $pattern = null, $get = null, $offset = null, $count = null, $store = null) {}
    public function sortDesc($key, $pattern = null, $get = null, $offset = null, $count = null, $store = null) {}
    public function sortDescAlpha($key, $pattern = null, $get = null, $offset = null, $count = null, $store = null) {}
    public function srem($key, $value, ...$other_values) {}
    public function sscan($key, &$iterator, $pattern = null, $count = null) {}
    public function ssubscribe($channels, $cb) {}
    public function strlen($key) {}
    public function subscribe($channels, $cb) {}
    public function sunsubscribe($channels) {}
    public function swapdb($src, $dst) {}
    public function time() {}
    public function ttl($key) {}
    public function type($key) {}
    public function unlink($key, ...$other_keys) {}
    public function unsubscribe($channels) {}
    public function unwatch() {}
    public function watch($key, ...$other_keys) {}
    public function wait($numreplicas, $timeout) {}
    public function xack($key, $group, $ids) {}
    public function xadd($key, $id, $values, $maxlen = null, $approx = null, $nomkstream = null) {}
    public function xautoclaim($key, $group, $consumer, $min_idle, $start, $count = null, $justid = null) {}
    public function xclaim($key, $group, $consumer, $min_idle, $ids, $options) {}
    public function xdel($key, $ids) {}
    public function xgroup($operation, $key = null, $group = null, $id_or_consumer = null, $mkstream = null, $entries_read = null) {}
    public function xinfo($operation, $arg1 = null, $arg2 = null, $count = null) {}
    public function xlen($key) {}
    public function xpending($key, $group, $start = null, $end = null, $count = null, $consumer = null) {}
    public function xrange($key, $start, $end, $count = null) {}
    public function xread($streams, $count = null, $block = null) {}
    public function xreadgroup($group, $consumer, $streams, $count = null, $block = null) {}
    public function xrevrange($key, $end, $start, $count = null) {}
    public function xtrim($key, $threshold, $approx = null, $minid = null, $limit = null) {}
    public function zAdd($key, $score_or_options, ...$more_scores_and_mems) {}
    public function zCard($key) {}
    public function zCount($key, $start, $end) {}
    public function zIncrBy($key, $value, $member) {}
    public function zLexCount($key, $min, $max) {}
    public function zMscore($key, $member, ...$other_members) {}
    public function zPopMax($key, $count = null) {}
    public function zPopMin($key, $count = null) {}
    public function zRange($key, $start, $end, $options = null) {}
    public function zRangeByLex($key, $min, $max, $offset = null, $count = null) {}
    public function zRangeByScore($key, $start, $end, $options = null) {}
    public function zrangestore($dstkey, $srckey, $start, $end, $options = null) {}
    public function zRandMember($key, $options = null) {}
    public function zRank($key, $member) {}
    public function zRem($key, $member, ...$other_members) {}
    public function zRemRangeByLex($key, $min, $max) {}
    public function zRemRangeByRank($key, $start, $end) {}
    public function zRemRangeByScore($key, $start, $end) {}
    public function zRevRange($key, $start, $end, $scores = null) {}
    public function zRevRangeByLex($key, $max, $min, $offset = null, $count = null) {}
    public function zRevRangeByScore($key, $max, $min, $options = null) {}
    public function zRevRank($key, $member) {}
    public function zScore($key, $member) {}
    public function zdiff($keys, $options = null) {}
    public function zdiffstore($dst, $keys) {}
    public function zinter($keys, $weights = null, $options = null) {}
    public function zintercard($keys, $limit = null) {}
    public function zinterstore($dst, $keys, $weights = null, $aggregate = null) {}
    public function zscan($key, &$iterator, $pattern = null, $count = null) {}
    public function zunion($keys, $weights = null, $options = null) {}
    public function zunionstore($dst, $keys, $weights = null, $aggregate = null) {}
}

class RedisArray {

    // methods
    public function __call($function_name, $arguments) {}
    public function __construct($name_or_hosts, $options = null) {}
    public function _continuum() {}
    public function _distributor() {}
    public function _function() {}
    public function _hosts() {}
    public function _instance($host) {}
    public function _rehash($fn = null) {}
    public function _target($key) {}
    public function bgsave() {}
    public function del($key, ...$otherkeys) {}
    public function discard() {}
    public function exec() {}
    public function flushall() {}
    public function flushdb() {}
    public function getOption($opt) {}
    public function hscan($key, &$iterator, $pattern = null, $count = null) {}
    public function info() {}
    public function keys($pattern) {}
    public function mget($keys) {}
    public function mset($pairs) {}
    public function multi($host, $mode = null) {}
    public function ping() {}
    public function save() {}
    public function scan(&$iterator, $node, $pattern = null, $count = null) {}
    public function select($index) {}
    public function setOption($opt, $value) {}
    public function sscan($key, &$iterator, $pattern = null, $count = null) {}
    public function unlink($key, ...$otherkeys) {}
    public function unwatch() {}
    public function zscan($key, &$iterator, $pattern = null, $count = null) {}
}

class RedisCluster {

    // constants
    const OPT_SLAVE_FAILOVER = 5;
    const FAILOVER_NONE = 0;
    const FAILOVER_ERROR = 1;
    const FAILOVER_DISTRIBUTE = 2;
    const FAILOVER_DISTRIBUTE_SLAVES = 3;

    // methods
    public function __construct($name, $seeds = null, $timeout = null, $read_timeout = null, $persistent = null, $auth = null, $context = null) {}
    public function _compress($value) {}
    public function _uncompress($value) {}
    public function _serialize($value) {}
    public function _unserialize($value) {}
    public function _pack($value) {}
    public function _unpack($value) {}
    public function _prefix($key) {}
    public function _masters() {}
    public function _redir() {}
    public function acl($key_or_address, $subcmd, ...$args) {}
    public function append($key, $value) {}
    public function bgrewriteaof($key_or_address) {}
    public function bgsave($key_or_address) {}
    public function bitcount($key, $start = null, $end = null, $bybit = null) {}
    public function bitop($operation, $deskey, $srckey, ...$otherkeys) {}
    public function bitpos($key, $bit, $start = null, $end = null, $bybit = null) {}
    public function blpop($key, $timeout_or_key, ...$extra_args) {}
    public function brpop($key, $timeout_or_key, ...$extra_args) {}
    public function brpoplpush($srckey, $deskey, $timeout) {}
    public function lmove($src, $dst, $wherefrom, $whereto) {}
    public function blmove($src, $dst, $wherefrom, $whereto, $timeout) {}
    public function bzpopmax($key, $timeout_or_key, ...$extra_args) {}
    public function bzpopmin($key, $timeout_or_key, ...$extra_args) {}
    public function bzmpop($timeout, $keys, $from, $count = null) {}
    public function zmpop($keys, $from, $count = null) {}
    public function blmpop($timeout, $keys, $from, $count = null) {}
    public function lmpop($keys, $from, $count = null) {}
    public function clearlasterror() {}
    public function client($key_or_address, $subcommand, $arg = null) {}
    public function close() {}
    public function cluster($key_or_address, $command, ...$extra_args) {}
    public function command(...$extra_args) {}
    public function config($key_or_address, $subcommand, ...$extra_args) {}
    public function dbsize($key_or_address) {}
    public function copy($src, $dst, $options = null) {}
    public function decr($key, $by = null) {}
    public function decrby($key, $value) {}
    public function decrbyfloat($key, $value) {}
    public function del($key, ...$other_keys) {}
    public function discard() {}
    public function dump($key) {}
    public function echo($key_or_address, $msg) {}
    public function eval($script, $args = null, $num_keys = null) {}
    public function eval_ro($script, $args = null, $num_keys = null) {}
    public function evalsha($script_sha, $args = null, $num_keys = null) {}
    public function evalsha_ro($script_sha, $args = null, $num_keys = null) {}
    public function exec() {}
    public function exists($key, ...$other_keys) {}
    public function touch($key, ...$other_keys) {}
    public function expire($key, $timeout, $mode = null) {}
    public function expireat($key, $timestamp, $mode = null) {}
    public function expiretime($key) {}
    public function pexpiretime($key) {}
    public function flushall($key_or_address, $async = null) {}
    public function flushdb($key_or_address, $async = null) {}
    public function geoadd($key, $lng, $lat, $member, ...$other_triples_and_options) {}
    public function geodist($key, $src, $dest, $unit = null) {}
    public function geohash($key, $member, ...$other_members) {}
    public function geopos($key, $member, ...$other_members) {}
    public function georadius($key, $lng, $lat, $radius, $unit, $options = null) {}
    public function georadius_ro($key, $lng, $lat, $radius, $unit, $options = null) {}
    public function georadiusbymember($key, $member, $radius, $unit, $options = null) {}
    public function georadiusbymember_ro($key, $member, $radius, $unit, $options = null) {}
    public function geosearch($key, $position, $shape, $unit, $options = null) {}
    public function geosearchstore($dst, $src, $position, $shape, $unit, $options = null) {}
    public function get($key) {}
    public function getbit($key, $value) {}
    public function getlasterror() {}
    public function getmode() {}
    public function getoption($option) {}
    public function getrange($key, $start, $end) {}
    public function lcs($key1, $key2, $options = null) {}
    public function getset($key, $value) {}
    public function gettransferredbytes() {}
    public function cleartransferredbytes() {}
    public function hdel($key, $member, ...$other_members) {}
    public function hexists($key, $member) {}
    public function hget($key, $member) {}
    public function hgetall($key) {}
    public function hincrby($key, $member, $value) {}
    public function hincrbyfloat($key, $member, $value) {}
    public function hkeys($key) {}
    public function hlen($key) {}
    public function hmget($key, $keys) {}
    public function hmset($key, $key_values) {}
    public function hscan($key, &$iterator, $pattern = null, $count = null) {}
    public function hrandfield($key, $options = null) {}
    public function hset($key, $member, $value) {}
    public function hsetnx($key, $member, $value) {}
    public function hstrlen($key, $field) {}
    public function hvals($key) {}
    public function incr($key, $by = null) {}
    public function incrby($key, $value) {}
    public function incrbyfloat($key, $value) {}
    public function info($key_or_address, ...$sections) {}
    public function keys($pattern) {}
    public function lastsave($key_or_address) {}
    public function lget($key, $index) {}
    public function lindex($key, $index) {}
    public function linsert($key, $pos, $pivot, $value) {}
    public function llen($key) {}
    public function lpop($key, $count = null) {}
    public function lpos($key, $value, $options = null) {}
    public function lpush($key, $value, ...$other_values) {}
    public function lpushx($key, $value) {}
    public function lrange($key, $start, $end) {}
    public function lrem($key, $value, $count = null) {}
    public function lset($key, $index, $value) {}
    public function ltrim($key, $start, $end) {}
    public function mget($keys) {}
    public function mset($key_values) {}
    public function msetnx($key_values) {}
    public function multi($value = null) {}
    public function object($subcommand, $key) {}
    public function persist($key) {}
    public function pexpire($key, $timeout, $mode = null) {}
    public function pexpireat($key, $timestamp, $mode = null) {}
    public function pfadd($key, $elements) {}
    public function pfcount($key) {}
    public function pfmerge($key, $keys) {}
    public function ping($key_or_address, $message = null) {}
    public function psetex($key, $timeout, $value) {}
    public function psubscribe($patterns, $callback) {}
    public function pttl($key) {}
    public function publish($channel, $message) {}
    public function pubsub($key_or_address, ...$values) {}
    public function punsubscribe($pattern, ...$other_patterns) {}
    public function randomkey($key_or_address) {}
    public function rawcommand($key_or_address, $command, ...$args) {}
    public function rename($key_src, $key_dst) {}
    public function renamenx($key, $newkey) {}
    public function restore($key, $timeout, $value, $options = null) {}
    public function role($key_or_address) {}
    public function rpop($key, $count = null) {}
    public function rpoplpush($src, $dst) {}
    public function rpush($key, ...$elements) {}
    public function rpushx($key, $value) {}
    public function sadd($key, $value, ...$other_values) {}
    public function saddarray($key, $values) {}
    public function save($key_or_address) {}
    public function scan(&$iterator, $key_or_address, $pattern = null, $count = null) {}
    public function scard($key) {}
    public function script($key_or_address, ...$args) {}
    public function sdiff($key, ...$other_keys) {}
    public function sdiffstore($dst, $key, ...$other_keys) {}
    public function set($key, $value, $options = null) {}
    public function setbit($key, $offset, $onoff) {}
    public function setex($key, $expire, $value) {}
    public function setnx($key, $value) {}
    public function setoption($option, $value) {}
    public function setrange($key, $offset, $value) {}
    public function sinter($key, ...$other_keys) {}
    public function sintercard($keys, $limit = null) {}
    public function sinterstore($key, ...$other_keys) {}
    public function sismember($key, $value) {}
    public function smismember($key, $member, ...$other_members) {}
    public function slowlog($key_or_address, ...$args) {}
    public function smembers($key) {}
    public function smove($src, $dst, $member) {}
    public function sort($key, $options = null) {}
    public function sort_ro($key, $options = null) {}
    public function spop($key, $count = null) {}
    public function srandmember($key, $count = null) {}
    public function srem($key, $value, ...$other_values) {}
    public function sscan($key, &$iterator, $pattern = null, $count = null) {}
    public function strlen($key) {}
    public function subscribe($channels, $cb) {}
    public function sunion($key, ...$other_keys) {}
    public function sunionstore($dst, $key, ...$other_keys) {}
    public function time($key_or_address) {}
    public function ttl($key) {}
    public function type($key) {}
    public function unsubscribe($channels) {}
    public function unlink($key, ...$other_keys) {}
    public function unwatch() {}
    public function watch($key, ...$other_keys) {}
    public function xack($key, $group, $ids) {}
    public function xadd($key, $id, $values, $maxlen = null, $approx = null) {}
    public function xclaim($key, $group, $consumer, $min_iddle, $ids, $options) {}
    public function xdel($key, $ids) {}
    public function xgroup($operation, $key = null, $group = null, $id_or_consumer = null, $mkstream = null, $entries_read = null) {}
    public function xautoclaim($key, $group, $consumer, $min_idle, $start, $count = null, $justid = null) {}
    public function xinfo($operation, $arg1 = null, $arg2 = null, $count = null) {}
    public function xlen($key) {}
    public function xpending($key, $group, $start = null, $end = null, $count = null, $consumer = null) {}
    public function xrange($key, $start, $end, $count = null) {}
    public function xread($streams, $count = null, $block = null) {}
    public function xreadgroup($group, $consumer, $streams, $count = null, $block = null) {}
    public function xrevrange($key, $start, $end, $count = null) {}
    public function xtrim($key, $maxlen, $approx = null, $minid = null, $limit = null) {}
    public function zadd($key, $score_or_options, ...$more_scores_and_mems) {}
    public function zcard($key) {}
    public function zcount($key, $start, $end) {}
    public function zincrby($key, $value, $member) {}
    public function zinterstore($dst, $keys, $weights = null, $aggregate = null) {}
    public function zintercard($keys, $limit = null) {}
    public function zlexcount($key, $min, $max) {}
    public function zpopmax($key, $value = null) {}
    public function zpopmin($key, $value = null) {}
    public function zrange($key, $start, $end, $options = null) {}
    public function zrangestore($dstkey, $srckey, $start, $end, $options = null) {}
    public function zrandmember($key, $options = null) {}
    public function zrangebylex($key, $min, $max, $offset = null, $count = null) {}
    public function zrangebyscore($key, $start, $end, $options = null) {}
    public function zrank($key, $member) {}
    public function zrem($key, $value, ...$other_values) {}
    public function zremrangebylex($key, $min, $max) {}
    public function zremrangebyrank($key, $min, $max) {}
    public function zremrangebyscore($key, $min, $max) {}
    public function zrevrange($key, $min, $max, $options = null) {}
    public function zrevrangebylex($key, $min, $max, $options = null) {}
    public function zrevrangebyscore($key, $min, $max, $options = null) {}
    public function zrevrank($key, $member) {}
    public function zscan($key, &$iterator, $pattern = null, $count = null) {}
    public function zscore($key, $member) {}
    public function zmscore($key, $member, ...$other_members) {}
    public function zunionstore($dst, $keys, $weights = null, $aggregate = null) {}
    public function zinter($keys, $weights = null, $options = null) {}
    public function zdiffstore($dst, $keys) {}
    public function zunion($keys, $weights = null, $options = null) {}
    public function zdiff($keys, $options = null) {}
}

class RedisClusterException extends \RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RedisException extends \RuntimeException {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RedisSentinel {

    // methods
    public function __construct($options = null) {}
    public function ckquorum($master) {}
    public function failover($master) {}
    public function flushconfig() {}
    public function getMasterAddrByName($master) {}
    public function master($master) {}
    public function masters() {}
    public function myid() {}
    public function ping() {}
    public function reset($pattern) {}
    public function sentinels($master) {}
    public function slaves($master) {}
}

}
